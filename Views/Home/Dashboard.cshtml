@model BugTracker.Models.ViewModels.DashboardViewModel
@using BugTracker.Extensions
@using BugTracker.Models.Enums
@using Microsoft.AspNetCore.Identity
@using System.Linq
@using System.Linq.Expressions
@using BugTracker.Services.Interfaces

@inject UserManager<BTUser> UserManager
@inject IBTRolesService RolesService
@inject IBTProjectService ProjectService
@inject IBTCompanyInfoService CompanyInfoService
@inject IBTNotificationService NotificationService
@{
    ViewData["Title"] = "Dashboard";
    BTUser user = await UserManager.GetUserAsync(User);
    int companyId = User.Identity.GetCompanyId().Value;

    Company company = await CompanyInfoService.GetCompanyInfoByIdAsync(companyId);

    List<Notification> notificationsList = await NotificationService.GetReceivedNotificationsAsync(user.Id);
    int notificationCount = notificationsList.Count;

    int allUsers = (await UserManager.GetUsersInRoleAsync(nameof(Roles.Admin))).Count +
                   (await UserManager.GetUsersInRoleAsync(nameof(Roles.ProjectManager))).Count +
                   (await UserManager.GetUsersInRoleAsync(nameof(Roles.Developer))).Count +
                   (await UserManager.GetUsersInRoleAsync(nameof(Roles.Submitter))).Count;

    int developersCount = (await UserManager.GetUsersInRoleAsync(nameof(Roles.Developer))).Count;
    int submittersCount = (await UserManager.GetUsersInRoleAsync(nameof(Roles.Submitter))).Count;
    int projectManagersCount = (await UserManager.GetUsersInRoleAsync(nameof(Roles.Submitter))).Count;

    List<int> projectsDeveloperCount = new();
    List<int> projectsSubmitterCount = new();
    List<int> projectsProjectManagerCount = new();
    List<string> legendProjectNames = new();
    int projectNameCount = 0;
   
    foreach(Project project in Model.Projects)
    {
        List<BTUser> devsOnProject = await ProjectService.GetProjectMembersByRoleAsync(project.Id, nameof(Roles.Developer));
        List<BTUser> submittersOnProject = await ProjectService.GetProjectMembersByRoleAsync(project.Id, nameof(Roles.Submitter));
        List<BTUser> pmsOnProject = await ProjectService.GetProjectMembersByRoleAsync(project.Id, nameof(Roles.ProjectManager));

        projectsDeveloperCount.Add(devsOnProject.Count);
        projectsSubmitterCount.Add(submittersOnProject.Count);
        projectsProjectManagerCount.Add(pmsOnProject.Count);

        //Update Project name 
        projectNameCount++;
        string projectLegendName = $"P{projectNameCount}";
        legendProjectNames.Add(projectLegendName);
    }

}

@section VendorCSS {
    <link rel="stylesheet" href="~/vendor/bootstrap-progressbar/css/bootstrap-progressbar-3.3.4.min.css">
    <link rel="stylesheet" href="~/vendor/jvectormap/jquery-jvectormap-2.0.3.min.css" />
    <link rel="stylesheet" href="~/vendor/nestable/jquery-nestable.css" />
    <link rel="stylesheet" href="~/vendor/jquery-datatable/dataTables.bootstrap4.min.css">

}

@*First Row : Pills*@
<div class="row clearfix">
    <div class="col-lg-3 col-md-6">
        <a asp-action="AllProjects" asp-controller="Projects" style="text-decoration: none;">
            <div class="card overflowhidden">
                <div class="body text-center bg-info">
                    <div class="p-15 text-light">
                        <h3>@Model.Projects.Where(p => p.EndDate > DateTime.Now).Count()</h3>
                        <span>Active Projects</span>
                    </div>
                </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-6">
        <a asp-action="AllTickets" asp-controller="Tickets" style="text-decoration: none;">
            <div class="card overflowhidden">
                <div class="body text-center bg-secondary">
                    <div class="p-15 text-light">
                        <h3>@Model.Tickets.Count</h3>
                        <span>Total Tickets</span>
                    </div>
                </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-6">
        <a asp-action="UnassignedTickets" asp-controller="Tickets" style="text-decoration: none;">
            <div class="card overflowhidden">
                <div class="body text-center bg-warning">
                    <div class="p-15 text-light">
                        <h3>@Model.Tickets.Where(t => t.DeveloperUser is null).Count()</h3>
                        <span>Unassigned Tickets</span>
                    </div>
                </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-6">
        <div class="card overflowhidden">
            <div class="body text-center bg-dark">
                <div class="p-15 text-light">
                    <h3>@(Model.Projects.Count() + Model.Tickets.Count() + Model.Members.Count())</h3>
                    <span>Active Projects</span>
                </div>
            </div>
        </div>
    </div>
</div>

@*Second Row : Charts/Data Points*@
<div class="row clearfix">
    @*Card 1 Stats*@
    <div class="col-lg-3 col-md-6 col-sm-12 mb-1">
        <div class="row clearfix">
            <div class="col-lg-12 col-md-12">
                <div class="card top_counter h-100 pt-2">
                    <div class="body pb-0">
                        <div class="icon"><i class="fa fa-user"></i> </div>
                        <div class="content">
                            <div class="text">New Users</div>
                            <h5 class="number">0</h5>
                        </div>
                        <hr />
                    </div>
                    <div class="body mt-0 pt-0 pb-0">
                        <div class="icon"><i class="fa fa-users"></i> </div>
                        <div class="content">
                            <div class="text">Total Users</div>
                            <h5 class="number">@allUsers</h5>
                        </div>
                        <hr />
                    </div>
                    
                    <div class="body mt-0 pt-0 pb-0">
                        <div class="icon"><i class="fa fa-ticket"></i> </div>
                        <div class="content">
                            <div class="text">Tickets in Development</div>
                            <h5 class="number">@Model.Tickets.Where(t => t.TicketStatus.Name == "Development").Count()</h5>
                        </div>
                        <hr />
                    </div>
                    
                    <div class="body mt-0 pt-0 pb-0">
                        <div class="icon"><i class="fa fa-code"></i> </div>
                        <div class="content">
                            <div class="text">Total Developers</div>
                            <h5 class="number">@developersCount</h5>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @*Card 2 Stats*@
    <div class="col-lg-3 col-md-6 col-sm-12 mb-1">
        <div class="card">
            <div class="header pb-0 mb-1">
                <h2>Company Data
                    <small>@company.Name</small>
                </h2>
            </div>
            <div class="body">
                <div class="list-group list-widget pt-0 pb-1 mt-0">
                    <div class="list-group-item">
                        <span class="badge badge-success">@allUsers</span>
                        <i class="fa fa-users text-muted"></i>Members
                    </div>
                    <div href="javascript:void(0);" class="list-group-item">
                        <span class="badge badge-info">@Model.Projects.Count</span>
                        <i class="fa fa-folder text-muted"></i> Projects
                    </div>
                    <div class="list-group-item">
                        <span class="badge badge-warning">@Model.Tickets.Count</span>
                        <i class="fa fa-ticket text-muted"></i> Tickets
                    </div>
                    <div class="list-group-item">
                        <span class="badge badge-danger">@notificationCount</span>
                        <i class="fa fa-bell text-muted"></i> Notifications
                    </div>
                </div>
            </div>
        </div>
    </div>
    @*Card 3 Pie Chart*@
    <div class="col-lg-3 col-md-6 col-sm-12 mb-1">
        <div class="card">
            <div class="header">
                <h2>Priority Projects<small>Project Priorities</small></h2>
            </div>

            @{
                decimal x = Model.Projects.Where(p => p.ProjectPriority.Name == nameof(BTProjectPriority.Urgent)).Count() / Model.Projects.Count * 100;

                decimal urgentCount = Model.Projects.Where(p => p.ProjectPriority.Name == nameof(BTProjectPriority.Urgent)).Count();
                decimal highCount = Model.Projects.Where(p => p.ProjectPriority.Name == nameof(BTProjectPriority.High)).Count();
                decimal mediumCount = Model.Projects.Where(p => p.ProjectPriority.Name == nameof(BTProjectPriority.Medium)).Count();
                decimal lowCount = Model.Projects.Where(p => p.ProjectPriority.Name == nameof(BTProjectPriority.Low)).Count();

                decimal projectCount = Model.Projects.Count;

                decimal urgentPercent = (urgentCount / projectCount) * 100;
                decimal highPercent = (highCount / projectCount) * 100;
                decimal mediumPercent = (mediumCount / projectCount) * 100;
                decimal lowPercent = (lowCount / projectCount) * 100;
            }

            <div class="body mt-0 pt-0">
                <div class="sparkline-pie text-center">@Model.Projects.Where(p => p.ProjectPriority.Name == nameof(BTProjectPriority.Urgent)).Count(),@Model.Projects.Where(p => p.ProjectPriority.Name == nameof(BTProjectPriority.High)).Count(),@Model.Projects.Where(p => p.ProjectPriority.Name == nameof(BTProjectPriority.Medium)).Count(), @Model.Projects.Where(p => p.ProjectPriority.Name == nameof(BTProjectPriority.Low)).Count()</div>
                <div class="stats-report text-center">
                    <div class="stat-item">
                        <h5>@nameof(BTProjectPriority.Urgent)</h5>
                        <b class="col-black">@String.Format("{0:0.0}", urgentPercent)%</b>
                    </div>
                    <div class="stat-item">
                        <h5>@nameof(BTProjectPriority.High)</h5>
                        <b class="col-black">@String.Format("{0:0.0}", highPercent)%</b>
                    </div>
                    <div class="stat-item">
                        <h5>@nameof(BTProjectPriority.Medium)</h5>
                        <b class="col-black">@String.Format("{0:0.0}", mediumPercent)%</b>
                    </div>
                    <div class="stat-item">
                        <h5>@nameof(BTProjectPriority.Low)</h5>
                        <b class="col-black">@String.Format("{0:0.0}", lowPercent)%</b>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    @*Card 4 Stacked Chart*@
    <div class="col-lg-3 col-md-6 col-sm-12 mb-1">
        <div class="card ">
            <div class="header mb-1 pb-0">
                 <h2>Roles by Project</h2>
            </div>
            <div class="body mt-0 pt-0">
                <div id="role-comp-chart" class="ct-chart"></div>
            </div>
        </div>
    </div>
</div>

@*Third Row : Tables*@
<div class="row clearfix">
    @*Members Table*@
    <div class="col-lg-5 col-md-12">
        <div class="card">
            <div class="header">
                <h2>Members</h2>
            </div>
             <div class="body">
                <div class="table-responsive">
                    <table class="table table-hover js-basic-example dataTable table-custom mb-0">
                        <thead class="thead-dark">
                            <tr>
                                <th>Avatar</th>
                                <th>Name</th>
                                <th>Projects</th>
                                <th>Role</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(BTUser member in Model.Members)
                            {
                                <tr>
                                    @if(member.AvatarFileData is null)
                                    {
                                        <td><a asp-action="MemberProfile" asp-controller="Home" asp-route-userId="@member.Id"><img src="https://cdn.icon-icons.com/icons2/1378/PNG/512/avatardefault_92824.png" class="rounded-circle" style="width:30px;height:30px;"  title="@member.FullName"  alt="Default Avatar" /></a></td>
                                    }
                                    @if(member.AvatarFileData is not null)
                                    {
                                        <td><a asp-action="MemberProfile" asp-controller="Home" asp-route-userId="@member.Id"><img src="data:image/*;base64,@(Convert.ToBase64String(member.AvatarFileData))" class="rounded-circle" style="width:30px;height:30px;" title="@member.FullName"  alt="@member.FullName's Avatar" /></a></td>
                                    } 

                                    <td>@member.FullName</td>
                                    
                                    @if(member.Projects is null)
                                    {
                                        <td>0</td>
                                    }
                                    @if(member.Projects is not null)
                                    {
                                        <td>@member.Projects.Count</td>
                                    }

                                    @{
                                        IEnumerable<string> memberRoles = await RolesService.GetUserRolesAsync(member);
                                        string memberRole = memberRoles.FirstOrDefault();
                                    }

                                    <td><span class="badge badge-default">@memberRole</span></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    @*@Projects Table*@
    <div class="col-lg-7 col-md-12">
        <div class="card">
            <div class="header">
                <h2>Projects</h2>
            </div>
            <div class="body">
                <div class="table-responsive">
                    <table class="table table-hover js-basic-example dataTable table-custom mb-0">
                        <thead class="thead-dark">
                            <tr>
                                <th>Project</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Team</th>
                                <th>Ticket Count</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(Project project in Model.Projects.Where(p => p.Archived == false))
                            {
                                <tr >
                                    <td>
                                        @{
                                            BTUser projectManager = await ProjectService.GetProjectManagerAsync(project.Id);

                                        }
                                        <a asp-controller="Projects" asp-action="Details" asp-route-id="@project.Id">@project.Name</a>
                                        @if(projectManager is not null)
                                        {
                                            <p class="text-muted">Project Manager: @projectManager.FullName</p>
                                        }
                                        else
                                        {
                                            <p class="text-muted">Project Manager: Unassigned</p>
                                        }

                                    </td>
                                    <td><span class="badge badge-success">@project.StartDate.ToString("MM/dd/yyyy")</span></td>
                                    <td><span class="badge badge-danger">@project.EndDate.ToString("MM/dd/yyyy")</span></td>
                                    <td>
                                        <ul class="list-unstyled team-info pb-0 mb-0">
                                            @foreach(BTUser member in project.Members.Where(m => m.Id != projectManager.Id))
                                            {
                                                @if(member.AvatarFileData is null)
                                                {
                                                    <li><img src="https://cdn.icon-icons.com/icons2/1378/PNG/512/avatardefault_92824.png" title="@member.FullName"  alt="Default Avatar"></li>
                                                }
                                                @if(member.AvatarFileData is not null)
                                                {
                                                    <li><img src="data:image/*;base64,@(Convert.ToBase64String(member.AvatarFileData))" title="@member.FullName"  alt="@member.FullName's Avatar" /></li>
                                                }

                                            }
                                        </ul>
                                    </td>
                                    <td>
                                        @if(project.Tickets is null)
                                        {
                                            <strong>0</strong>
                                        }
                                        @if(project.Tickets is not null)
                                        {
                                            <strong>@project.Tickets.Count()</strong>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    @*Tickets Table*@
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="card">
            <div class="header">
                <h2>Tickets</h2>
            </div>
            <div class="body">
                <div class="table-responsive">
                    <table class="table table-hover js-basic-example dataTable table-custom mb-0">
                        <thead class="thead-dark">
                            <tr>
                                <th>Title</th>
                                <th>Developer</th>
                                <th>Status</th>
                                <th>Priority</th>
                                <th>Date</th>
                                <th>Action</th>
                                
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(Ticket ticket in Model.Tickets)
                            {
                                <tr>
                                    <td>@ticket.Title</td>
                                    @if(ticket.DeveloperUser is null && ( User.IsInRole(nameof(Roles.Admin)) || User.IsInRole(nameof(Roles.Admin)) ) )
                                    {
                                        <td><a asp-controller="Tickets" asp-action="AssignDeveloper" asp-route-id="@ticket.Id" class="btn btn-sm btn-info">Assign Dev</a></td>
                                    }
                                    else if(ticket.DeveloperUser is null)
                                    {
                                        <td></td>
                                    }
                                    else
                                    {
                                        <td>@ticket.DeveloperUser.FullName</td>
                                    }
                                    <td>
                                        @if(ticket.TicketStatus.Name == nameof(BTTicketStatus.New))
                                        {
                                            <span class="badge badge-primary">New</span>
                                        }
                                        @if(ticket.TicketStatus.Name == nameof(BTTicketStatus.Development))
                                        {
                                            <span class="badge badge-info">Development</span>
                                        }
                                        @if(ticket.TicketStatus.Name == nameof(BTTicketStatus.Resolved))
                                        {
                                            <span class="badge badge-success">Resolved</span>
                                        }
                                        @if(ticket.TicketStatus.Name == nameof(BTTicketStatus.Testing))
                                        {
                                            <span class="badge badge-warning">Testing</span>
                                        }
                                    </td>
                                    <td>
                                        @if(ticket.TicketPriority.Name == nameof(BTTicketPriority.Urgent))
                                        {
                                            <span class="badge badge-default">Urgent</span>
                                        }
                                        @if(ticket.TicketPriority.Name == nameof(BTTicketPriority.High))
                                        {
                                            <span class="badge badge-default">High</span>
                                        }
                                        @if(ticket.TicketPriority.Name == nameof(BTTicketPriority.Medium))
                                        {
                                            <span class="badge badge-default">Medium</span>
                                        }
                                        @if(ticket.TicketPriority.Name == nameof(BTTicketPriority.Low))
                                        {
                                            <span class="badge badge-default">Low</span>
                                        } 
                                    </td>
                                    <td>@ticket.Created.ToString("MM-dd-yyyy")</td>
                                    <td>
                                        @{
                                            BTUser projectManager = await ProjectService.GetProjectManagerAsync(ticket.Project.Id);
                                        }
                                        <a asp-controller="Tickets" asp-action="Details" asp-route-id="@ticket.Id" class="btn btn-sm btn-outline-info"><i class="icon-eye"></i></a>
                                        @if (User.IsInRole(nameof(Roles.Admin)) || user.Id == projectManager.Id || user.Id == ticket.OwnerUserId)
                                        {
                                            <a asp-controller="Tickets" asp-action="Edit" asp-route-id="@ticket.Id" class="btn btn-sm btn-outline-secondary"><i class="icon-pencil"></i></a>
                                            <a class="btn btn-sm btn-outline-danger" asp-controller="Tickets" asp-action="Archive" asp-route-id="@ticket.Id"><i class="fa fa-file-archive-o"></i></a>
                                        }
                                    </td>
                                    
                                </tr>
                            }
                            
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="~/bundles/jvectormap.bundle.js"></script> <!-- JVectorMap Plugin Js -->
    
    <script src="~/bundles/knob.bundle.js"></script> <!-- Jquery Knob-->
    <script src="~/vendor/nestable/jquery.nestable.js"></script> <!-- Jquery Nestable -->
    <script src="~/js/pages/ui/sortable-nestable.js"></script>
    <script src="~/js/index4.js"></script>
    <script src="~/bundles/datatablescripts.bundle.js"></script>
    <script src="~/js/pages/tables/jquery-datatable.js"></script>
    <script src="~/js/index.js"></script>
    <script src="~/bundles/chartist.bundle.js"></script>
    <script src="~/js/pages/charts/chartjs.js"></script>
  

    <script>
        $(function() {
            // stacked bar chart
            var dataStackedBar = {
                labels: @Html.Raw(Json.Serialize(legendProjectNames)),
                series: [
                    @Html.Raw(Json.Serialize(projectsDeveloperCount)),
                    @Html.Raw(Json.Serialize(projectsProjectManagerCount)),
                    @Html.Raw(Json.Serialize(projectsSubmitterCount)),
                ]
            };
            new Chartist.Bar('#role-comp-chart', dataStackedBar, {
                height: "250px",
                stackBars: true,
                axisX: {
                    showGrid: false
                },
                axisY: {
                    labelInterpolationFnc: function (value) {
                        return value;
                    }
                },
                plugins: [
                    Chartist.plugins.tooltip({
                        appendToBody: true
                    }),
                    Chartist.plugins.legend({
                        legendNames: ['Submitters', 'Developers', 'PMs']
                    })
                ]
            }).on('draw', function (data) {
                if (data.type === 'bar') {
                    data.element.attr({
                        style: 'stroke-width: 20px'
                    });
                }
            });
        });
    </script>

}



